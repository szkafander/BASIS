%% graph construction cell of Nodes workflow tutorial
% hit ctrl+enter while highlighting a cell to run it.
% comments explain the code.

%% the following demonstrates Graph construction using cell of Nodes method
% here we recreate the Graph in the file
% 'data/graphs/pyrometry_bicolor_image_registration.gml'. you may open the
% graph in an editor and follow along step by step. the .gml also contains
% explanation for each Node.

% constructing from a cell of Nodes is more natural to use in a script than
% the .add_node method.

% the Graph we will build here actually performs image registration. this 
% is a good tutorial to start if you just want to see how to put together a
% simple workflow. to do this with the .add_node method, see 
% tutorials.graph_construction_add_nodes

% using this method, we simply list Nodes in a Matlab cell and pass it to
% the constructor of Graph.

nodes = { ...
    Node( ...
        'label', 'frame_1', ...
        'pipeline', @data.read_image, ...
        'group', 1, ...
        'outputnodes', 'merge'), ...
    Node( ...
        'label', 'frame_2', ...
        'pipeline', @data.read_image, ...
        'group', 2), ...
    Node( ...
        'label', 'transformation_matrix', ...
        'pipeline', ...
        @(~)data.load_parameter( ...
        [get_basis_path '..\data\other\transformation_matrix.mat']), ...
        'group', 2), ...
    Node( ...
        'label', 'show', ...
        'pipeline', ...
        @(image_1, image_2)imshowpair(image_1, image_2, ...
        'scaling', 'independent', 'colorchannels', [2 1 1]), ...
        'inputnodes', {'frame_1', 'register_2'}), ...
    Node( ...
        'label', 'register', ...
        'pipeline', ...
        @(image, ...
        transformation_matrix)preprocessing.transform_image ...
        (image, transformation_matrix), ...
        'inputnodes', {'frame_2', 'transformation_matrix'}, ...
        'outputnodes', 'show') ...
    };

graph_ = Graph(nodes);

% plot and print a summary
graph_.plot();
graph_.print_summary();

%% run the graph just to make sure that it works
driver_ = Driver(Case( ...
    [get_basis_path '..\data\images\pyrometry\stepping']), ...
    graph_);
driver_.run();